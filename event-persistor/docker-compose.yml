services:
  application:
    image: 'peachex/event-persistor-application:latest'
    container_name: 'event-persistor-application'
    environment:
      - 'APPLICATION_PORT=8082'
      - 'APPLICATION_CONTEXT_PATH=/EventPersistor'
      - 'MONGODB_CONNECTION_STR=mongodb://mongodb-1:27017,mongodb-2:27018,mongodb-3:27019/event_radar?replicaSet=rs0'
      - 'MONGODB_DATABASE=event_radar'
      - 'MONGODB_USERNAME=root'
      - 'MONGODB_PASSWORD=root'
      - 'MONGODB_CONNECTION_TIMEOUT=3000'
      - 'MONGODB_SOCKET_TIMEOUT=10000'
      - 'MONGODB_MAX_WAIT_TIME=3000'
      - 'MONGODB_SERVER_SELECTION_TIMEOUT=3000'
      - 'MONGO_TEMPLATE_LOGGING=DEBUG'
    restart: 'on-failure'
    networks:
      - 'eventradar-network'

  mongodb-1:
    image: mongo
    command: [ '--replSet', 'rs0', '--bind_ip_all', '--port', '27017' ]
    container_name: 'mongodb-1'
    ports:
      - '27018:27017'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    restart: 'on-failure'
    environment:
      - 'MONGO_INITDB_ROOT_USERNAME='
      - 'MONGO_INITDB_ROOT_PASSWORD='
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27018',priority:1},{_id:1,host:'host.docker.internal:27019',priority:0.5},{_id:2,host:'host.docker.internal:27020',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - 'mongo-1-data:/data/db'
      - './mongodb-scripts/mongo-create-user.sh:/mongodb-scripts/mongo-create-user.sh'
    networks:
      - 'eventradar-network'

  mongodb-2:
    image: mongo
    command: [ '--replSet', 'rs0', '--bind_ip_all', '--port', '27018' ]
    container_name: 'mongodb-2'
    ports:
      - '27019:27018'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    restart: 'on-failure'
    volumes:
      - 'mongo-2-data:/data/db'
    networks:
      - 'eventradar-network'

  mongodb-3:
    image: mongo
    command: [ '--replSet', 'rs0', '--bind_ip_all', '--port', '27019' ]
    container_name: 'mongodb-3'
    ports:
      - '27020:27019'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    restart: 'on-failure'
    volumes:
      - 'mongo-3-data:/data/db'
    networks:
      - 'eventradar-network'

  mongo-init:
    image: mongo
    container_name: mongo-init
    command: [ 'bash', '-c', '/mongodb-scripts/mongo-create-user.sh && exit 0' ]
    environment:
      - 'MONGO_HOST=mongodb-1'
      - 'MONGO_PORT=27017'
      - 'MONGO_USER=root'
      - 'MONGO_PASSWORD=root'
    depends_on:
      - 'mongodb-1'
    volumes:
      - './mongodb-scripts/mongo-create-user.sh:/mongodb-scripts/mongo-create-user.sh'
    networks:
      - 'eventradar-network'
    restart: 'no'

  mongo-express:
    image: mongo-express
    container_name: 'mongo-express'
    restart: 'on-failure'
    ports:
      - '27021:8081'
    environment:
      - 'ME_CONFIG_MONGODB_ADMINUSERNAME=root'
      - 'ME_CONFIG_MONGODB_ADMINPASSWORD=root'
      - 'ME_CONFIG_BASICAUTH_USERNAME=mongo_express_user'
      - 'ME_CONFIG_BASICAUTH_PASSWORD=mongo_express_password'
      - 'ME_CONFIG_MONGODB_SERVER=mongodb-1'
      - 'ME_CONFIG_MONGODB_PORT=27017'
    networks:
      - 'eventradar-network'

volumes:
  mongo-1-data:
    driver: 'local'
  mongo-2-data:
    driver: 'local'
  mongo-3-data:
    driver: 'local'

networks:
  eventradar-network:
    driver: 'bridge'
    name: 'eventradar-network'